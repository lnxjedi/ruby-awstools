---
# CloudGenerator network template, used to generate the VPC and subnets
#
# This was created based on the AWS 'Scenario 2':
# http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html
AWSTemplateFormatVersion: '2010-09-09'
Description: The Public subnet ACLs
Parameters:
  VPCId: { Type: String }
  PublicAcl: { Type: String }

# Note that with CG, only ids of created resources need to be passed in
# as parameters.
# Parameters: (none needed, top-level resource)
Resources:
### PublicAcls
# Acl's for the Public subnets

## PublicInboundAcls
  # Note that even for Public, SSH is still restricted to Org CIDRs and
  # the Management subnet
  InboundPublicAllowOrgSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 100
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 22, To: 22 }
      CidrBlock: { Ref: $OrgCIDRs }

  InboundPublicAllowSSHManagement:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 110
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 22, To: 22 }
      CidrBlock: { Ref: $ManagementSubnet }

  # Similar restrictions for RDP
  InboundPublicAllowOrgRDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 120
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 3389, To: 3389 }
      CidrBlock: { Ref: $OrgCIDRs }

  InboundPublicAllowRDPManagement:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 130
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 3389, To: 3389 }
      CidrBlock: { Ref: $ManagementSubnet }

  InboundPublicAllowHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 200
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0

  InboundPublicAllowHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 210
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 443, To: 443 }
      CidrBlock: 0.0.0.0/0

  InboundPublicAclAllowReturn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 250
      RuleAction: allow
      Protocol: 6
      Egress: false
      # Allow return traffic to ephemeral ports created by
      # outbound connections.
      PortRange: { From: 32768, To: 65535 }
      CidrBlock: 0.0.0.0/0

## End PublicInboundAcls
## PublicOutboundAcls

  # Allow sending email
  OutboundPublicAllowSmtp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 100
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 25, To: 25 }
      CidrBlock: 0.0.0.0/0

  OutboundPublicAllowMailSub:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 110
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 587, To: 587 }
      CidrBlock: 0.0.0.0/0

  # Allow outbound connections to http/s
  OutboundPublicAllowHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 120
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0

  OutboundPublicAllowHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 130
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 443, To: 443 }
      CidrBlock: 0.0.0.0/0
  
  # Allow DB Connections to Private
  OutboundPublicAllowPostgreSQL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 140
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 5432, To: 5432 }
      CidrBlock: { Ref: $PrivateSubnet }
  
  OutboundPublicAllowMSSQL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 150
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 1433, To: 1433 }
      CidrBlock: { Ref: $PrivateSubnet }
  
  OutboundPublicAllowMySQL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 160
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 3306, To: 3306 }
      CidrBlock: { Ref: $PrivateSubnet }
  
  OutboundPublicAclAllowReturn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: PublicAcl }
      RuleNumber: 200
      RuleAction: allow
      Protocol: 6
      Egress: true
      # Allow return traffic to connecting clients
      PortRange: { From: 32768, To: 65535 }
      CidrBlock: 0.0.0.0/0

## End PublicOutboundAcls
### End PublicAcls
