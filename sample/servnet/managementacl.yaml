---
# CloudGenerator Management subnets ACL template
#
# This was created based on the AWS 'Scenario 2':
# http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html
AWSTemplateFormatVersion: '2010-09-09'
Description: The Management subnet ACLs
Parameters:
  VPCId: { Type: String }
  ManagementAcl: { Type: String }

# Note that with CG, only ids of created resources need to be passed in
# as parameters.
# Parameters: (none needed, top-level resource)
Resources:
### ManagementAcls
## InboundManagementAcls

# Acl's for the Management subnets
  InboundManagementAclAllowITSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 100
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 22, To: 22 }
      CidrBlock: { Ref: $OrgITCIDRs }

  InboundManagementAclAllowITRDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 110
      RuleAction: allow
      Protocol: 6
      Egress: false
      PortRange: { From: 3389, To: 3389 }
      CidrBlock: { Ref: $OrgITCIDRs }

  InboundManagementAclAllowReturn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 200
      RuleAction: allow
      Protocol: 6
      Egress: false
      # Allow return traffic from outbound connections
      PortRange: { From: 32768, To: 65535 }
      CidrBlock: 0.0.0.0/0

## End InboundManagementAcls
## ManagementOutboundAcls

  # Allow sending email
  OutboundManagementAllowSmtp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 100
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 25, To: 25 }
      CidrBlock: 0.0.0.0/0

  OutboundManagementAllowMailSub:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 110
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 587, To: 587 }
      CidrBlock: 0.0.0.0/0

  # Allow RDP/SSH to hosts in the VPC
  OutboundManagementAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 120
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 22, To: 22 }
      CidrBlock: { Ref: $VPCCIDR }

  OutboundManagementAllowRDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 130
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 3389, To: 3389 }
      CidrBlock: { Ref: $VPCCIDR }

  # Allow outbound connections to http/s
  OutboundManagementAllowHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 140
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0

  OutboundManagementAllowHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 150
      RuleAction: allow
      Protocol: 6
      Egress: true
      PortRange: { From: 443, To: 443 }
      CidrBlock: 0.0.0.0/0
  
  OutboudManagementAclAllowReturn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: { Ref: ManagementAcl }
      RuleNumber: 200
      RuleAction: allow
      Protocol: 6
      Egress: true
      # Allow return traffic to connecting clients
      PortRange: { From: 32768, To: 65535 }
      CidrBlock: 0.0.0.0/0

## End ManagementOutboundAcls
### End ManagementAcls
