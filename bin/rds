#!/usr/bin/ruby

require 'pathname'
lp = Pathname.new($0).realpath().dirname().dirname()
$LOAD_PATH.unshift("#{lp}/lib")
require 'rawstools'
require 'optparse'

opts = OptionParser.new

opts.banner = <<-EOF
Usage: rds <command> (options) (args) - manage a CloudFormation stack
 Where <command> is one of:
  create <name> <rootpassword> <template> - create an rds db instance from a
    template (name or path) with the provided root password
  snapshot <name> - take a snapshot of the db instance <name>
  password <name> <rootpassword> - update the root password for an instance
  template - dump the default template for creating db instances
  delete database <name> - delete a db instance
  delete snapshot <name> - delete a db snapshot
  updatedns <name> - refresh DNS CNAME for the db instance
  update backup <name> <time> - change backup window for an instance
    (e.g. 2:30am)
  update maintenance <name> <day> <time> - change maintenance window for an
    instance (e.g. Thursday 2:00am)
  resize instance <name> <type> - change size of instance to new type during
    next maintenance window (e.g. db.t2.small)
  resize storage <name> <size> - change storage size to new size (in GB)
    during next maintenance window
  list instances - list db instances for the current project
  list snapshots (name) - list db snapshots for the current project,
    optionally for a single db instance
  list types - list the available types of database for the project
  metadata <type> - show the metadata for a given database type
 Options are:
EOF

class UsageException < Exception
  def initialize(msg="Invalid command / option / argument")
    super(msg)
  end
end

begin

commands = [ "create", "list", "rename", "snapshot", "delete", "template", "password", "resize", "update", "updatedns", "metadata" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

params = {}
tags = {}
wait = false
datasize = nil
unsafe = false

case command
when "create"
  opts.on("-d", "--data-size SIZE", "Create with allocated storage of size SIZE") do |dsize|
    params["datasize"] = dsize
  end
  opts.on("-w", "--wait", "Wait for all operations to complete before exiting") do
    wait = true
  end
  opts.on("-i", "--iops IOPS", "Specify provisioned iops, only used with io1 storage") do |iops|
    params["iops"] = iops
  end
  opts.on("-s", "--snapshot SNAP", "Create db instance from snapshot with identifier SNAP") do |snap|
    params["snapname"] = snap
  end
  opts.on("-S", "--storage-type TYPE", "Create with storage of type TYPE (gp2, io1, etc.)") do |stype|
    params["storage_type"] = stype
  end
  opts.on("-t", "--db-instance-type TYPE", "Use TYPE for db instance type instead of template default") do |type|
    params["type"] = type
  end
  opts.on("-T", "--tag KEYVAL", "Add tag where KEYVAL is of the form key=value") do |keyval|
    e = keyval.index("=")
    key = keyval[0..(e-1)]
    value = keyval[(e+1)..-1]
    tags[key] = value
  end
  opts.on("-p", "--parameter PARAMVAL", "Set an arbitrary parameter where PARAMVAL is of the form parameter=value") do |keyval|
    e = keyval.index("=")
    key = keyval[0..(e-1)]
    value = keyval[(e+1)..-1]
    params[key] = value
  end
when "updatedns", "delete"
  opts.on("-w", "--wait", "Wait for all operations to complete before exiting") do
    wait = true
  end
  if command == "delete"
    opts.on("-u", "--unsafe", "Don't create a final snapshot when deleting a database") do
      unsafe = true
    end
  end
end

opts.parse!

cfg = RAWSTools::CloudManager.new()
cfg.setparams(params)

case command
when "metadata"
  template = ARGV.shift()
  raise UsageException.new("Missing required type argument") unless template
  data, err = cfg.rds.get_metadata(template)
  if data
    puts("#{YAML::dump(data)}")
  else
    puts("#{err}")
  end
when "list"
  type = ARGV.shift()
  raise UsageException.new("Missing <instances|snapshots> in list command") unless type
  case type
  when "types"
    puts "#{cfg.rds.list_types().join(", ")}"
  when "instances"
    format = "%-15s %-15s %-14s %-19s %-12s %-12s"
    puts format % [ "Name", "Identifier", "Instance class", "Allocated storage", "Backup Start", "Maint Start" ]
    cfg.rds.list_instances().each() do |i|
      puts format % [
        cfg.rds.get_tag(i, "Name"),
        i.db_instance_identifier,
        i.db_instance_class,
        i.allocated_storage,
        cfg.rds.get_backup(i),
        cfg.rds.get_maintenance(i),
      ]
    end
  when "snapshots"
    format = "%-15s %-35s %-9s %-16s %6s"
    puts format % [ "Name", "Identifier", "Type", "Created", "Size" ]
    cfg.rds.list_snapshots(ARGV.shift()).each do |s|
      createstamp = s.snapshot_create_time.getlocal.strftime("%F|%R")
      snaptype = cfg.rds.get_tag(s, "SnapshotType")
      snaptype = "unknown" unless snaptype
      puts format % [ cfg.rds.get_tag(s, "Name"), s.db_snapshot_identifier, snaptype, createstamp ,s.allocated_storage.to_s + "GB" ]
    end
  end
when "resize"
  type = ARGV.shift()
  raise UsageException.new("Missing <instance|storage> in resize command") unless type
  case type
  when "instance"
    name, type = ARGV.shift(2)
    raise UsageException.new("Missing required argument") unless type
    success, message = cfg.rds.resize_instance(name, type)
    if success
      puts "Resizing #{name} to #{type} during next maintenance window: #{message}"
    else
      puts "Error resizing #{name}: #{message}"
    end
  when "storage"
    name, size = ARGV.shift(2)
    raise UsageException.new("Missing required argument") unless size
    success, message = cfg.rds.resize_storage(name, size)
    if success
      puts "Resizing storage for #{name} to #{size} during next maintenance window: #{message}"
    else
      puts "Error resizing #{name}: #{message}"
    end
  else
    raise UsageException.new("Invalid argument to update command, need one of backup, maintenance")
  end
when "update"
  type = ARGV.shift()
  raise UsageException.new("Missing <backup|maintenance> in update command") unless type
  case type
  when "backup"
    name, time = ARGV.shift(2)
    raise UsageException.new("Missing required argument") unless time
    success, message = cfg.rds.set_backup(name, time)
    if success
      puts "Set backup window to #{message}"
    else
      puts "Error setting backup window: #{message}"
    end
  when "maintenance"
    name, day, time = ARGV.shift(3)
    raise UsageException.new("Missing required argument") unless time
    success, message = cfg.rds.set_maintenance(name, day, time)
    if success
      puts "Set maintenance window to #{message}"
    else
      puts "Error setting maintenance window: #{message}"
    end
  else
    raise UsageException.new("Invalid argument to update command, need one of backup, maintenance")
  end
when "create"
  name, rootpass, template = ARGV.shift(3)
  raise UsageException.new("Missing required argument") unless template
  cfg.rds.create_instance(name, rootpass, template, wait) { |status| puts status }
when "template"
  cfg.rds.dump_template()
when "updatedns"
  name = ARGV.shift()
  raise UsageException.new("Missing required name argument") unless name
  cfg.rds.update_dns(name, wait) { |status| puts status }
when "password"
  name, rootpass = ARGV.shift(2)
  raise UsageException.new("Missing required name argument") unless rootpass
  success, err = cfg.rds.root_password(name, rootpass)
  if success
    puts "Password successfully changed"
  else
    puts err
  end
when "snapshot"
  name = ARGV.shift()
  raise UsageException.new("Missing <name> argument") unless name
  cfg.rds.create_snapshot(name) { |status| puts status }
when "delete"
  type = ARGV.shift()
  raise UsageException.new("Missing <type> argument (database or snapshot)") unless type
  name = ARGV.shift()
  raise UsageException.new("Missing <name> argument") unless name
  case type
  when "database"
    cfg.rds.delete_instance(name, wait, unsafe) { |status| puts status }
  when "snapshot"
    cfg.rds.delete_snapshot(name) { |status| puts status }
  end
end

rescue UsageException => e
  puts "\n#{e.message}\n\n"
  puts opts.help()
end
