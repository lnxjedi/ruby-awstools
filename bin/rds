#!/usr/bin/ruby

require 'rawstools'
require 'optparse'

cfgfile = ENV["RAWS_CLOUDCFG"]

opts = OptionParser.new

opts.banner = <<-EOF
Usage: rds <command> (options) (args) - manage a CloudFormation stack
 Where <command> is one of:
  create <name> <rootpassword> <template> - create an rds db instance from a template (name or path) with the provided root password
  snapshot <name> - take a snapshot of the db instance <name>
  template - dump the default template for creating db instances
  delete <name> - delete a db instance
  updatedns <name> - refresh DNS CNAME for the db instance
  list - list db instances for the current project
 Options are:
EOF
opts.on("-c", "--configfile FILE", "Use FILE for cloud configuration instead of ./cloudconfig.yaml") do |file|
	cfgfile = file
end

class UsageException < Exception
	def initialize(msg="Invalid command / option / argument")
		super(msg)
	end
end

begin

commands = [ "create", "list", "rename", "snapshot", "delete", "template", "updatedns" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

params = {}
tags = {}
wait = false
datasize = nil
deletestorage = false

case command
when "create"
	opts.on("-d", "--data-vol SIZE", "Create with storage of size SIZE") do |dsize|
		params["datasize"] = dsize
	end
	opts.on("-N", "--no-dns", "Don't create DNS records for <name>.${DNSDomain}") do
		params["nodns"] = true
	end
	opts.on("-w", "--wait", "Wait for db instance to be available") do
		wait = true
	end
	opts.on("-i", "--iops IOPS", "Specify provisioned iops, only used with io1 volumes") do |iops|
		params["iops"] = iops
	end
	opts.on("-s", "--snapshot SNAP", "Create db instance from snapshot SNAP") do |snap|
		params["snapname"] = snap
	end
	opts.on("-S", "--storage-type TYPE", "Create with storage of type TYPE (gp2, io1, etc.)") do |stype|
		params["storage_type"] = stype
	end
	opts.on("-t", "--db-instance-type TYPE", "Use TYPE for db instance type instead of template default") do |type|
		params["type"] = type
	end
	opts.on("-z", "--availability-zone ZONE", "Create db instance in the given zone (letter only)") do |zone|
		params["az"] = zone
	end
	opts.on("-T", "--tag KEYVAL", "Add tag where KEYVAL is of the form key=value") do |keyval|
		e = keyval.index("=")
		key = keyval[0..(e-1)]
		value = keyval[(e+1)..-1]
		tags[key] = value
	end
	opts.on("-p", "--parameter PARAMVAL", "Set an arbitrary parameter where PARAMVAL is of the form parameter=value") do |keyval|
		e = keyval.index("=")
		key = keyval[0..(e-1)]
		value = keyval[(e+1)..-1]
		params[key] = value
	end
when "updatedns", "terminate", "snapshot"
	opts.on("-w", "--wait", "Wait for DNS records to sync") do
		wait = true
	end
	if command == "terminate"
		opts.on("-d", "--delete-storage", "Delete db instance storage") do
			deletestorage = true
		end
	end
end

opts.parse!

cfgfile = "cloudconfig.yaml" unless cfgfile

raise UsageException.new("Missing configuration file: #{cfgfile}") unless File::exist?(cfgfile)
raise UsageException.new("Not a regular file: #{cfgfile}") unless File::stat(cfgfile).file?

cfg = RAWSTools::CloudManager.new(cfgfile)
cfg.setparams(params)

case command
when "list"
	format = "%-15s %-15s %-14s %-19s"
	puts format % [ "Name", "Identifier", "Instance class", "Allocated storage" ]
	cfg.rds.list_db_instances().each() do |i|
		puts format % [ cfg.rds.get_tag(i, "Name"), i.db_instance_identifier, i.db_instance_class, i.allocated_storage ]
	end
when "create"
	name, rootpass, template = ARGV.shift(3)
	raise UsageException.new("Missing required argument") unless template
	cfg.setparam("name", name)
	cfg.setparam("rootpassword", rootpass)
	dbinstance = cfg.rds.create_db_instance(template, wait) { |status| puts status }
	cfg.rds.dump_template()
when "updatedns"
  name = ARGV.shift()
  raise UsageException.new("Missing required name argument") unless name
  cfg.setparam("name", name)
  cfg.rds.update_dns() { |status| puts status }
when "snapshot"
	name = ARGV.shift()
	raise UsageException.new("Missing <name> argument") unless name
	cfg.setparam("volname", name)
	cfg.ec2.create_snapshot(wait) { |status| puts status }
when "delete"
	name = ARGV.shift()
	raise UsageException.new("Missing <name> argument") unless name
	cfg.setparam("name", name)
	cfg.rds.delete_db_instance(wait, deletestorage) { |status| puts status }
end

rescue UsageException => e
	puts "\n#{e.message}\n\n"
	puts opts.help()
end
