#!/usr/bin/ruby

require 'rawstools'
require 'optparse'

outputdir = "output"
upload = true
disable_rollback = false
generate_only = false
params = {}

opts = OptionParser.new

opts.banner = <<-EOF
Usage: cfn <command> (options) <stack|templatedir> - manage a CloudFormation stack
 Where <command> is one of:
  list - list all stacks for the account
  outputs <stackname>(:childstack) - list all the outputs of a given stack
  output <stackname>(:childstack):<outputname> - get a specific output
  create <stack> - create a new stack
  delete <stack> - delete a stack (warning: without confirmation, no resources retained)
  update <stack> - update a stack
  validate <stack> - run templates through validation

 <stack> corresponds to a directory under cfn/, or in <SearchPath>/cfn

 <stackname> refers the actual name of the created stack, from
   stackconfig.yaml: StackName

 Options are:
EOF
opts.on("-d", "--disable-rollback", "Disable rollback when a create or update fails") do |disable|
  disable_rollback = true
end
opts.on("-g", "--generate-only", "Generate expanded templates without creating or updating the stack") do |generate_only|
  generate_only = true
end
opts.on("-p", "--parameter PARAMVAL", "Set an arbitrary parameter where PARAMVAL is of the form parameter=value") do |keyval|
  e = keyval.index("=")
  key = keyval[0..(e-1)]
  value = keyval[(e+1)..-1]
  params[key] = value
end

class UsageException < Exception
  def initialize(msg="Invalid command / option / argument")
    super(msg)
  end
end

begin

commands = [ "create", "delete", "list", "outputs", "output", "update", "validate" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

opts.parse!

cfg = RAWSTools::CloudManager.new()

cfg.setparam("generate_only", generate_only)
cfg.setparam("disable_rollback", disable_rollback)
cfg.setparams(params)

case command
when "list"
  stacklist = cfg.cfn.list_stacks()
  if stacklist.length() > 0
    puts "Stacks:"
    puts stacklist
  else
    puts "No stacks found"
  end
  exit 0
when "outputs"
  stack = ARGV.shift()
  raise UsageException.new("Missing required argument") unless stack
  outputs = cfg.cfn.getoutputs(stack)
  if outputs.length() > 0
    puts "Outputs:"
    outputs.each_key() do |key|
      puts "#{key} => #{outputs[key]}"
    end
  else
    puts "No outputs found for #{stack}"
  end
  exit 0
when "output"
  output = ARGV.shift()
  raise UsageException.new("Missing required argument") unless output
  value = cfg.cfn.getoutput(output)
  if value
    puts value
  else
    puts
  end
  exit 0
end

# From here on down we process create, delete, update and validate
stack_id = ARGV.shift()
raise UsageException.new("Missing <stack>") unless stack_id

begin
  stack = RAWSTools::MainTemplate.new(cfg, stack_id)
rescue => e
  $stderr.puts("Error initializing #{stack_id}: #{e.message}")
  $stderr.puts(e.backtrace)
  exit 1
end

case command
when "create"
  begin
    stack.Create()
  rescue => e
    $stderr.puts("Error creating #{stack_id}: #{e.message}")
    $stderr.puts(e.backtrace)
    exit 1
  end
when "delete"
  begin
    stack.Delete()
  rescue => e
    $stderr.puts("Error deleting #{stack_id}: #{e.message}")
    $stderr.puts(e.backtrace)
    exit 1
  end
when "update"
  begin
    stack.Update()
  rescue => e
    $stderr.puts("Error updating #{stack_id}: #{e.message}")
    exit 1
  end
when "validate"
  begin
    stack.Validate()
  rescue => e
    $stderr.puts("Error validating #{stack_id}: #{e.message}")
    $stderr.puts(e.backtrace)
    exit 1
  end
end

rescue UsageException => e
  puts "\n#{e.message}\n\n"
  puts opts.help()
end
