#!/usr/bin/ruby

require 'rawstools'
require 'optparse'

outputdir = "output"
upload = true
disable_rollback = false
cfgfile = ENV["RAWS_CLOUDCFG"]

opts = OptionParser.new

opts.banner = <<-EOF
Usage: cfn <command> (options) <templatename|templatedir> - manage a CloudFormation stack
 Where <command> is one of:
  generate - generate json templates for the stack
  list - list all stacks for the account
  outputs <stackname>(:childstack) - list all the outputs of a given stack
  output <stackname>(:childstack):<outputname> - get a specific output
  create - create a new stack
  delete - delete a stack (warning: without confirmation, no resources retained)
  update - update a stack
  validate - run templates through validation
 <templatename> corresponds to a directory under cfn/, or you can specify the full path
 Options are:
EOF
opts.on("-t", "--jsondir DIRECTORY", "Use <templatedir>/DIRECTORY instead of <templatedir>/output for JSON files") do |dir|
	outputdir = dir
end
opts.on("-c", "--configfile FILE", "Use FILE for cloud configuration instead of ./cloudconfig.yaml") do |file|
	cfgfile = file
end
opts.on("-d", "--disable-rollback", "Disable rollback when a create or update fails") do |disable|
	disable_rollback = true
end

class UsageException < Exception
	def initialize(msg="Invalid command / option / argument")
		super(msg)
	end
end

begin

commands = [ "create", "delete", "generate", "list", "outputs", "output", "update", "validate" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

opts.parse!

cfgfile = "cloudconfig.yaml" unless cfgfile

raise UsageException.new("Missing configuration file: #{cfgfile}") unless File::exist?(cfgfile)
raise UsageException.new("Not a regular file: #{cfgfile}") unless File::stat(cfgfile).file?

cfg = RAWSTools::CloudManager.new(cfgfile)

case command
when "list"
	stacklist = cfg.cfn.list_stacks()
	if stacklist.length() > 0
		puts "Stacks:"
		puts stacklist
	else
		puts "No stacks found"
	end
	exit 0
when "outputs"
	stack = ARGV.shift()
	raise UsageException.new("Missing required argument") unless stack
	outputs = cfg.cfn.getoutputs(stack)
	if outputs.length() > 0
		puts "Outputs:"
		outputs.each_key() do |key|
			puts "#{key} => #{outputs[key]}"
		end
	else
		puts "No outputs found for #{stack}"
	end
	exit 0
when "output"
	output = ARGV.shift()
	raise UsageException.new("Missing required argument") unless output
	value = cfg.cfn.getoutput(output)
	if value
		puts value
	else
		puts
	end
	exit 0
end

template_arg = ARGV.shift()
raise UsageException.new("Missing <templatename|templatedir>") unless template_arg

template_arg = template_arg.chomp("/")
if template_arg.include?("/")
	templatename = File::basename(template_arg)
	templatedir = template_arg
else
	templatename = template_arg
	templatedir = "cfn/#{templatename}"
end

raise UsageException.new("Directory not found: #{templatedir}") unless File::exist?(templatedir)
raise UsageException.new("Not a directory: #{templatedir}") unless File::stat(templatedir).directory?

outputdir = templatedir + "/" + outputdir

if File::exist?(outputdir)
	raise UsageException.new("Not a directory: #{outputdir}") unless File::stat(outputdir).directory?
else
	if command == "generate"
		Dir::mkdir(outputdir)
	else
		raise UsageException.new("No such file or directory: #{outputdir}")
	end
end

# Generate the hub template that owns other templates
maincfg = RAWSTools::MainTemplate.new(templatedir, templatename, cfg)
maincfg.process()
puts # blank line after 'Loading ...'

filenames = [ "main" ] + maincfg.children.map { |child| child.name().downcase() }
upload = false if filenames.length() == 1

stackprefix = (cfg["StackPrefix"]?cfg["StackPrefix"]:"")
stackname = stackprefix + templatename
stack_required_capabilities = []
stack_tags = cfg.tags.apitags()

case command
when "generate"
	maincfg.process_children()
	maincfg.write_all(outputdir)
when "create", "update", "validate"
	filenames.each() do |tfile|
		json = File::read(outputdir + "/" + tfile + ".json")
		case command
		when "validate"
			puts "Validating #{tfile}"
			cfg.cfn.validate(json)
		when "create", "update"
      puts "Validating #{tfile}"
			required_capabilities = cfg.cfn.validate(json, false)
			if ! upload
				json = File::read(outputdir + "/" + tfile + ".json")
				params = {
					stack_name: stackname,
					tags: stack_tags,
					capabilities: required_capabilities,
					disable_rollback: disable_rollback,
					template_body: json,
				}
				if command == "create"
					puts "Creating #{stackname}"
					stackout = cfg.cfn.client.create_stack(params)
				else
					puts "Updating #{stackname}"
					params.delete(:disable_rollback)
					stackout = cfg.cfn.client.update_stack(params)
				end
				puts "Stack ID: #{stackout.stack_id}"
			else
				obj = cfg.s3res.bucket(cfg["Bucket"]).object("#{cfg["Prefix"]}/#{templatename}/#{tfile}.json")
				puts "Uploading #{tfile}"
				obj.upload_file("#{outputdir}/#{tfile}.json")
				stack_required_capabilities = (stack_required_capabilities + required_capabilities).uniq()
			end
		end
	end
	if upload && [ "create", "update" ].include?(command)
		json = File::read(outputdir + "/main.json")
		template_url = "https://s3.amazonaws.com/#{cfg["Bucket"]}/#{cfg["Prefix"]}/#{templatename}/main.json"
		params = {
			stack_name: stackname,
			tags: stack_tags,
			capabilities: stack_required_capabilities,
			disable_rollback: disable_rollback,
			template_url: template_url,
		}
		if command == "create"
			puts "Creating #{stackname} from #{template_url}"
			stackout = cfg.cfn.client.create_stack(params)
		else
			puts "Updating #{stackname}"
			params.delete(:disable_rollback)
			stackout = cfg.cfn.client.update_stack(params)
		end
		puts "Stack ID: #{stackout.stack_id}"
	end
when "delete"
	puts "Deleting #{stackname}"
	cfg.cfn.client.delete_stack({ stack_name: stackname })
end

rescue UsageException => e
	puts "\n#{e.message}\n\n"
	puts opts.help()
end
