#!/usr/bin/env ruby

require 'pathname'
lp = Pathname.new($0).realpath().dirname().dirname()
$LOAD_PATH.unshift("#{lp}/lib")
require 'rawstools'
require 'optparse'

disable_rollback = false
generate_only = false
params = {}

opts = OptionParser.new

opts.banner = <<-EOF
Usage: cfn <command> (options) <stack|templatedir> - manage a CloudFormation stack
 Where <command> is one of:
  list - list all stacks for the account
  resources <stackname>(:childstack) - list all the resources of a given stack
  resource <stackname>(:childstack...):<resourcename>(.property)(=resourcetype) - get a specific resource or property
  create <stackdef> - create a new stack from a stack definition
  delete <stackdef> - delete a stack (warning: without confirmation, no resources retained)
  update <stackdef> - update a stack
  validate <stack> - run templates through validation

 <stack> corresponds to a directory under cfn/, or in <SearchPath>/cfn

 <stackname> refers the actual name of the created stack, from
   stackconfig.yaml: StackName

 Options are:
EOF
opts.on("-d", "--disable-rollback", "Disable rollback when a create or update fails") do
  params["disable_rollback"] = true
end
opts.on("-g", "--generate-only", "Generate expanded templates without creating or updating the stack") do
  params["generate_only"] = true
end
opts.on("-p", "--parameter PARAMVAL", "Set an arbitrary parameter where PARAMVAL is of the form parameter=value") do |keyval|
  e = keyval.index("=")
  key = keyval[0..(e-1)]
  value = keyval[(e+1)..-1]
  params[key] = value
end

class UsageException < Exception
  def initialize(msg="Invalid command / option / argument")
    super(msg)
  end
end

begin

commands = [ "create", "delete", "list", "resources", "resource", "update", "validate" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

opts.parse!

params["generate_only"] = generate_only
params["disable_rollback"] = disable_rollback
cfg = RAWSTools::CloudManager.new(params)

case command
when "list"
  stacklist = cfg.cfn.list_stacks()
  if stacklist.length() > 0
    puts "Stacks:"
    puts stacklist
  else
    puts "No stacks found"
  end
  exit 0
when "resources"
  stack = ARGV.shift()
  raise UsageException.new("Missing required argument") unless stack
  resources = cfg.cfn.getresources(stack)
  if resources.length() > 0
    puts "Resources:"
    resources.each_key() do |key|
      puts "#{key} => #{resources[key]}"
    end
  else
    puts "No resources found for #{stack}"
  end
  exit 0
when "resource"
  resource = ARGV.shift()
  raise UsageException.new("Missing required argument") unless resource
  value = cfg.cfn.getresource(resource)
  if value
    puts value
  else
    puts
  end
  exit 0
end

# From here on down we process create, delete, update and validate
stack_id = ARGV.shift()
raise UsageException.new("Missing <stack>") unless stack_id

begin
  stack = RAWSTools::MainTemplate.new(cfg, stack_id)
rescue => e
  $stderr.puts("Error initializing #{stack_id}: #{e.message}")
  $stderr.puts(e.backtrace)
  exit 1
end

case command
when "create"
  begin
    stack.Create()
  rescue => e
    $stderr.puts("Error creating #{stack_id}: #{e.message}")
    $stderr.puts(e.backtrace)
    exit 1
  end
when "delete"
  begin
    stack.Delete()
  rescue => e
    $stderr.puts("Error deleting #{stack_id}: #{e.message}")
    $stderr.puts(e.backtrace)
    exit 1
  end
when "update"
  begin
    stack.Update()
  rescue => e
    $stderr.puts("Error updating #{stack_id}: #{e.message}")
    exit 1
  end
when "validate"
  begin
    stack.Validate()
  rescue => e
    $stderr.puts("Error validating #{stack_id}: #{e.message}")
    $stderr.puts(e.backtrace)
    exit 1
  end
end

rescue UsageException => e
  puts "\n#{e.message}\n\n"
  puts opts.help()
end
