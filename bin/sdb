#!/usr/bin/env ruby

require 'pathname'
lp = Pathname.new($0).realpath().dirname().dirname()
$LOAD_PATH.unshift("#{lp}/lib")
require 'rawstools'
require 'optparse'

opts = OptionParser.new

opts.banner = <<-EOF
Usage: sdb <command> (options) (args) - store and retrieve simple key-value pairs from SimpleDB
 Where <command> is one of:
  store <item>:<key> <value> - store a <key> <value> pair for <item>
  retrieve <item>:<key> - retrieve the values of <key> for <item>
 Options are:
EOF

params = {}

opts.on("-d", "--domain DOMAIN", "Use the given domain instead of the DefaultSDB from cloud config file (normally ConfigDB)") do |dom|
  params["sdbdomain"] = dom
end

class UsageException < Exception
  def initialize(msg="Invalid command / option / argument")
    super(msg)
  end
end

begin

commands = [ "store", "retrieve" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

replace = true

case command
when "store"
  opts.on("-n", "--no-replace", "Add a value instead of replacing (the default)") do
    replace = false
  end
end

opts.parse!

cfg = RAWSTools::CloudManager.new(params)

case command
when "store"
  itemkey, value = ARGV.shift(2)
  raise UsageException.new("Missing required argument") unless value
  item, key = itemkey.split(":")
  raise UsageException.new("Invalid <item>:<key> argument") unless key
  cfg.sdb.store(item, key, value, replace)
  puts "Stored attribute #{key} = #{value} for item #{item} in domain #{cfg.sdb.getdomain()}"
when "retrieve"
  itemkey = ARGV.shift()
  raise UsageException.new("Missing required argument") unless itemkey
  item, key = itemkey.split(":")
  raise UsageException.new("Invalid <item>:<key> argument") unless key
  values = cfg.sdb.retrieve(item, key)
  puts values
end

rescue UsageException => e
  puts "\n#{e.message}\n\n"
  puts opts.help()
end
