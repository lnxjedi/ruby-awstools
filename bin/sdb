#!/usr/bin/ruby

require 'rawstools'
require 'optparse'

cfgfile = ENV["RAWS_CLOUDCFG"]

opts = OptionParser.new

opts.banner = <<-EOF
Usage: sdb <command> (options) (args) - store and retrieve simple key-value pairs from SimpleDB
 Where <command> is one of:
  store <item>:<key> <value> - store a <key> <value> pair for <item>
  retrieve <item>:<key> - retrieve the values of <key> for <item>
 Options are:
EOF

params = {}

opts.on("-d", "--domain DOMAIN", "Use the given domain instead of the DefaultSDB from cloud config file (normally ConfigDB)") do |dom|
	params["sdbdomain"] = dom
end
opts.on("-c", "--configfile FILE", "Use FILE for cloud configuration instead of ./cloudconfig.yaml") do |file|
	cfgfile = file
end

class UsageException < Exception
	def initialize(msg="Invalid command / option / argument")
		super(msg)
	end
end

begin

commands = [ "store", "retrieve" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

replace = true

case command
when "store"
	opts.on("-n", "--no-replace", "Add a value instead of replacing (the default)") do
		replace = false
	end
end

opts.parse!

cfgfile = "cloudconfig.yaml" unless cfgfile

raise UsageException.new("Missing configuration file: #{cfgfile}") unless File::exist?(cfgfile)
raise UsageException.new("Not a regular file: #{cfgfile}") unless File::stat(cfgfile).file?

cfg = RAWSTools::CloudManager.new(cfgfile)
cfg.setparams(params)

case command
when "store"
	itemkey, value = ARGV.shift(2)
	raise UsageException.new("Missing required argument") unless value
	item, key = itemkey.split(":")
	raise UsageException.new("Invalid <item>:<key> argument") unless key
	cfg.sdb.store(item, key, value, replace)
	puts "Stored attribute #{key} = #{value} for item #{item} in domain #{cfg.sdb.getdomain()}"
when "retrieve"
	itemkey = ARGV.shift()
	raise UsageException.new("Missing required argument") unless itemkey
	item, key = itemkey.split(":")
	raise UsageException.new("Invalid <item>:<key> argument") unless key
	values = cfg.sdb.retrieve(item, key)
	puts values
end

rescue UsageException => e
	puts "\n#{e.message}\n\n"
	puts opts.help()
end
