#!/usr/bin/ruby

require 'pathname'
script_dir = File.dirname(Pathname.new(__FILE__).realpath)
project_dir = Dir::getwd()

require 'optparse'
require 'yaml'
require 'rubygems'
Dir::chdir(script_dir)
require 'bundler/setup'
require 'aws-sdk'
require_relative 'lib/cfglib'
#require_relative 'lib/cfnlib'
Dir::chdir(project_dir)

cfgfile = "cloudconfig.yaml"

opts = OptionParser.new

opts.banner = <<-EOF
Usage: ec2 <command> (options) (args) - manage a CloudFormation stack
 Where <command> is one of:
  deletekeypair <keyname>
  genkeypair <keyname> (outputdir) - generate a keypair and store it in <keyname>.pem
  start <instancename|instanceId> - start a stopped instance; i-* are assumed instance ID
 Options are:
EOF
opts.on("-c", "--configfile FILE", "Use FILE for cloud configuration instead of ./cloudconfig.yaml") do |file|
	cfgfile = file
end

class UsageException < Exception
	def initialize(msg="Invalid command / option / argument")
		super(msg)
	end
end

begin

commands = [ "deletekeypair", "genkeypair", "start" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

case command
when "start"
	dnsname = nil
	opts.on("-d", "--dns-name HOSTNAME", "Update the HOSTNAME after the instance starts (uses PublicDNS from cloudconfig.yaml)") do |host|
		dnsname = host
	end
end

opts.parse!

raise UsageException.new("Missing configuration file: #{cfgfile}") unless File::exist?(cfgfile)
raise UsageException.new("Not a regular file: #{cfgfile}") unless File::stat(cfgfile).file?

cfg = ConfigFile.new(cfgfile)
cfg = cfg.process()

ec2 = Aws::EC2::Client.new( region: cfg["Region"] )

#s3 = Aws::S3::Resource.new( region: cfg["Region"] )

case command
when "start"
	ispec = ARGV.shift()
	raise UsageException.new("Missing <instancename|instanceId> argument") unless ispec
	puts "Starting #{ispec}, dnsname is #{dnsname}.#{cfg["PublicDNS"]}"
when "genkeypair"
	keyname = ARGV.shift()
	raise UsageException.new("Missing <keyname> argument") unless keyname
	outputdir = ARGV.shift()
	if outputdir
		raise UsageException.new("Not a directory: #{outputdir}") unless File::stat(outputdir).directory?
		outputdir += "/" unless outputdir.end_with?("/")
		keyfilename = "#{outputdir}#{keyname}.pem"
	else
		keyfilename = "#{keyname}.pem"
	end
	raise UsageException.new("File already exists: #{keyfilename}") if File::exist?(keyfilename)
	puts "Creating keypair #{keyname} and storing in #{keyfilename}"
	key = ec2.create_key_pair({key_name: keyname})
	keyfile = File.open(keyfilename, "w")
	keyfile.write(key.key_material())
	keyfile.close()
when "deletekeypair"
	keyname = ARGV.shift()
	raise UsageException.new("Missing <keyname> argument") unless keyname
	ec2.delete_key_pair({key_name: keyname})
	puts "Deleted"
end

rescue UsageException => e
	puts "\n#{e.message}\n\n"
	puts opts.help()
end
