#!/usr/bin/ruby

require 'pathname'
script_dir = File.dirname(Pathname.new(__FILE__).realpath)

require 'optparse'
require 'yaml'
require 'rubygems'
Dir::chdir(script_dir) do
	require 'bundler/setup'
	require 'aws-sdk'
	require_relative 'lib/cloud'
end

cfgfile = ENV["RAWS_CLOUDCFG"]

opts = OptionParser.new

opts.banner = <<-EOF
Usage: ec2 <command> (options) (args) - manage a CloudFormation stack
 Where <command> is one of:
  create <name/dns prefix> <keyname> <template> - create one or more instances from a template (name or path)
  deletekeypair <keyname>
  genkeypair <keyname> (outputdir) - generate a keypair and store it in <keyname>.pem
  start <instancename|instanceId> - start a stopped instance; i-* are assumed instance ID
 Options are:
EOF
opts.on("-c", "--configfile FILE", "Use FILE for cloud configuration instead of ./cloudconfig.yaml") do |file|
	cfgfile = file
end

class UsageException < Exception
	def initialize(msg="Invalid command / option / argument")
		super(msg)
	end
end

begin

commands = [ "create", "deletekeypair", "genkeypair", "start" ]
command = ARGV.shift()
raise UsageException.new("Missing <command>") unless command
raise UsageException.new("Unknown command: #{command}") unless commands.include?(command)

params = {}
dns = false

case command
when "create"
	opts.on("-d", "--dns", "Add public/private DNS records for <name>.${DNSDomain}") do |dns|
		dns = true
	end
	opts.on("-e", "--ebs-optimized", "Create ebs-optimized instances") do |ebsoptimized|
		params["ebsoptimized"] = true
	end
	opts.on("-m", "--monitoring", "Enable ec2 monitoring (CPU, disk/network, status checks)") do |monitor|
		params["monitor"] = true
	end
	opts.on("-t", "--instance-type TYPE", "Use TYPE for instance type instead of template default") do |type|
		params["type"] = type
	end
	opts.on("-s", "--subnet-name SUBNET", "Run instance(s) in named SUBNET") do |subnet|
		params["subnet"] = subnet
	end
	opts.on("-n", "--count COUNT", "Use TYPE for instance type instead of template default") do |count|
		params["count"] = count
	end
end

opts.parse!

cfgfile = "cloudconfig.yaml" unless cfgfile

raise UsageException.new("Missing configuration file: #{cfgfile}") unless File::exist?(cfgfile)
raise UsageException.new("Not a regular file: #{cfgfile}") unless File::stat(cfgfile).file?

cfg = RAWSTools::CloudManager.new(cfgfile, script_dir)
cfg.setparams(params)

case command
when "create"
	name, key, template = ARGV.shift(3)
	raise UsageException.new("Missing required argument") unless template
	cfg.setparam("name", name)
	cfg.setparam("key", key)
	idata = cfg.ec2.create_from_template(template)
	puts "Created #{idata.map(&:id)}, waiting for state: running..."
	cfg.ec2.wait_running(idata)
	puts "Running."
when "start"
	ispec = ARGV.shift()
	raise UsageException.new("Missing <instancename|instanceId> argument") unless ispec
	puts "Starting #{ispec}, dnsname is #{dnsname}.#{cfg["PublicDNS"]}"
when "genkeypair"
	keyname = ARGV.shift()
	raise UsageException.new("Missing <keyname> argument") unless keyname
	outputdir = ARGV.shift()
	if outputdir
		raise UsageException.new("Not a directory: #{outputdir}") unless File::stat(outputdir).directory?
		outputdir += "/" unless outputdir.end_with?("/")
		keyfilename = "#{outputdir}#{keyname}.pem"
	else
		keyfilename = "#{keyname}.pem"
	end
	raise UsageException.new("File already exists: #{keyfilename}") if File::exist?(keyfilename)
	puts "Creating keypair #{keyname} and storing in #{keyfilename}"
	key = cfg.ec2.create_key_pair({key_name: keyname})
	keyfile = File.open(keyfilename, "w")
	keyfile.write(key.key_material())
	keyfile.close()
when "deletekeypair"
	keyname = ARGV.shift()
	raise UsageException.new("Missing <keyname> argument") unless keyname
	cfg.ec2.delete_key_pair({key_name: keyname})
	puts "Deleted"
end

rescue UsageException => e
	puts "\n#{e.message}\n\n"
	puts opts.help()
end
